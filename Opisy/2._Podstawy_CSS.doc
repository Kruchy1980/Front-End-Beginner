##########################################################################
################## Kurs Front End JavaScript, CSS i HTML #################
##########################################################################

II. CSS od podstaw.

1. Połączenia plików .css i .js z plikiem .html

Aby połączyć plik css z kodem HTML, należy:
W nagłówku strony połączyć go linkiem:
    <link rel="stylesheet" href="ścieżka do naszego pliku .css">
-------------
Jeśli chcemy połączyć plik js z html-em, to używamy tagu:

<script src="ścieżka do plilku javascript'owego"></script>

I najlepiej jest zrobić to na samym dole pliku HTML.
----------------------
Kod Html z zaimplementowanymi plikami .js i .css.

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Linkowanie pliku CSS</title>
    <!--Aby połączyć plik stylu z kodem html, dodajemy do head'a strony następujący tag.-->
    <link rel="stylesheet" href="cssstyle/main.css">
    <!--Jest to obecnie stosowany sposób nadawania styli stronom HTML, czyli w osobnym pliku css znajdującym się w otoczeniu naszego projektu .html-->
    <!--Niestosowaną już metodą nadawania styli jest wklepywanie stylu na stronie z kodem html.
    Pomocnym przy tworzeniu stron jest jednak wrzucenie na stronie html tagu style jeszcze w headzie strony i pisanie tutaj kodu css, aby na zakończenie działania ze stroną przerzucenie styli do powiązanego pliku .css-->

    <!-- Wpisując w poniższe tagi style różne elementy css możemy wystylizować stronęm a następnie przenieść możemy ten kod do pliku .css  -->
    <style>
        div {
            background-color: aquamarine;
        }
    </style>

    <!-- Możemy również zaimplementować tutaj style skryptowe, aby potem przenieść je do pliku .js -->
    <script>
        alert('Strona prosta z kilkoma informacjami o połączeniach plików .css i .js z kodem HTML')
    </script>
</head>

<body>
    <!--Możemy jeszcze umieszczać style tzw inline, czyli w następujący sposób-->
    <div
        style="color: white; background-color: black; font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;">
        <p>Umieściliśmy w tym kontenerku - div'ie - kilka styli rozdzielonych średnikiem.</p>
    </div>
    <div>
        <h1>Możemy również przypisać/zaimplementować sobie tutaj do h2 lub jakiegokolwiek innego tagu kod java
            scriptowy,
            który będzie np wyświetlał po kliknięciu komunikat w postaci np alertu, aby było to bardziej efektywne niż
            wydruk w konsoli.</h1>
        <h2 onclick="javascript:alert('Nacisnąłeś właśnie tekst powitalny kolego');">Tekst powitalny - kliknij mnie</h2>
        <p>Jak widzimy możemy implementować proste polecenia java scriptowe - proste dlatego, że bardziej skomplikowane
            zajmują więcej miejsca a co za tym idzie i więcej pamięci na czym nam nie zależy. <br>
            Podobnie jak nadawanie styli dobrym zwyczajem jest umieszczać kody javascript w osobnym pliku, a następnie
            łączenie go za pomocą tagu <br>
            <span>
                " < s c r i p t src="ścieżka do pliku javascript">
                    < /s c r i p t> " </span> <br>
            najlepiej umieszczając go na dole naszej strony - z tego powodu, że
            przeważnie aby wykonał się kod JScript strona powinna być załadowana do końca, a jak wiemy kody
            wykonywane są od góry do dołu więc implementując kod skryptowy na samym dole strony jednak jeszcze
            pomiędzy tagiem html / html aby wiadomo było, że dotyczy to czegokolwiek ma dotyczyć w tym kodzie.
        </p>
        <h3>Należy zapamiętać, że metody stosowania czy styli czy skryptów metodami inlinowymi, nie są już modne i nie
            używa się ich, natomiast dobrą praktyką jest używanie osobnych plików do styli i skryptów, a następnie ich
            przywoływanie za pomocą odpowiednich tagów do kodu strony.</h3>
    </div>
</body>
<!--Tutaj właśnie możemy umieścić powiązanie z naszym plikiem javascript-->
<script src="javas/main.js"></script>

</html>
-------------------------------------------------------------------------
!!! UWAGA - Jeśli chodzi o skrypty, to przeważnie wykonują się one po załadowaniu danego elementu strony, znaczy się element musi się załadować zanim wykona się kod skryptowy.
Wiemy również, że kod jak każdy wykonuje się od góry czyli linijki 1 do dołu więc najbezpieczniej jest ustawić połączenie plików skryptowych na samym dole stronym po wykonaniu się już głównego kodu.
Jest jednak możliwość zastosowania odpowiednij funkcji wykonywania kodu w samym kodzie skryptowym, który 
-------------------------------------------------------------------------

2. Praca ze stylami kolorów i ułożenia tekstów.
Mamy w sumie 4 rodzaje zapisów kolorów:
1. Po nazwie j.angielski np. red, blue, green, etc - i drobne zmiany jak darkblue or lightblue i inne kolory. niestety przez to nie ma dużo kolorów, dlatego używamy głównie kolorów:

2. rgb(x, y, z)

3. rgba(x, y, z, a)
Gdzie w obu przypadkach:
x - 0-255 red
y - 0-255 green
z - 0-255 blue
a - odpowiada za przezroczystość kolorów i przyjmuje wartości od 0-1, np 0.3 albo 0.336 zapisywane z kropką, gdzie 0 to w pełni przezroczyste, a 1 to w ogóle nie przezroczyste.
Jak wiemy są 3 podstawowe kolory:
czerwony
niebieski
zielony
A mieszanki tych kolorów dają odpowiednie odcienie więc możemy mieć szeroką paletę.

4. Mamy jeszcze zapis heksagonalny, a mienowicie #223344, gdzie każdy z podstawowych kolorów zapisuje się dwoma cyfro-literami ponieważ przyjmują wartości od 0-f
# - zaznaczenie kodu że będziemy używać hexagonalnego zapisu
22 - czerwony przyjmujący wartości od 0-f każdy ze znaków
33 - zielony przyjmujący wartości od 0-f każdy ze znaków
44 - -niebieski przyjmujący wartości od 0-f każdy ze znaków
Jest on najczęściej używany ze względu na mnogość odcieni, które może zaoferować.

Plik css z naszego rozdziału:

        /** Jeśli chcemy nadać jakiś styl elementowi strony, to zapisujemy to w poniższy sposób, 
        piszemy nazwę elementy, następnie nawias klamrowy { }, w którym to wpisujemy style, a każdy styl kończymy średnikiem.**/
        h1 {
            text-align: center;
        }

        table {
            border: dashed 1px rgb(79, 79, 209);
        }

        td {
            background-color: pink;
            text-align: center;
            border: solid 1px green;
            padding: 2px;
        }

        /** Możemy nadawać style do kilku elementów jeśli nadamy im tą samą klasę, jednak te style będziemy zapisywać za pomocą kropki i nazwy ".nazwaKlasy" **/
        /** Przypisaliśmy np klasę do wszystkich kolumn nr 1  i nadaliśmy nazwę klasie "jeden" **/
        .jeden {
            text-align: left;
            background-color: rgb(30, 3, 58);
            color: white;
        }

        .prawo {
            text-align: right;
            color: white;
            margin-right: 40px;
        }

        .lewo {
            text-align: left;
            color: blueviolet;

        }

        /** Jest jeszcze możliwość nadawania styli elementom posiadającym identyfikator id="fiord" przykładowo. Stylizując element z identyfikatorem używamy "#nazwaIdentyfikatora"
        Przy czym należy pamiętać, że  **/
        #lista {
            background-color: yellowgreen;
            text-align: center
        }



        /** Możemy również łączyć elementy, robimy to po przecinku,  a także możemy szczegółówo zaznaczać elementy tzn że idziemy kroczek po kroczku do danego elementu np**/
        body article ol li {
            text-decoration: underline;
            font-weight: bold;
        }

        /* Tutaj pokażemy jak kilki elementom nadać jeden styl*/
        header,
        section,
        p {
            background-color: orangered;
            color: whitesmoke;
        }

Plik html z tego rozdziału:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Kolory i ułożenie tekstu</title>
    <!--Łaczymy plik styli z plikiem html-->
    <link rel="stylesheet" href="cssstyle/kolory_tekst.css">
    <style>

    </style>
</head>

<body>
    <div>
        <header>
            <h1>Tutaj pobawimy się kolorami i ułożeniem tekstu na naszej stronie.</h1>
        </header>
        <nav>
            <ul>
                <li><a href="linkowe/index.html"> Przenieś mnie na inną stronę</a></li>
            </ul>
        </nav>
        <section>
            <h3>A tutaj chcę wrzucić jakieś zdjądko z lorempixel.com, aby było ciekawiej:)</h3>
            <img src="http://lorempixel.com/400/200/sports/1/Dummy-Text" alt="Zdjątko z lorempixel.com">
            <p>Tutaj jeszcze trochę jakiegoś tekstu może:
                Lorem ipsum dolor sit amet, consectetur adipisicing elit. Qui hic deleniti illum nulla nam
                necessitatibus culpa doloremque animi at veniam recusandae similique minima vero placeat deserunt
                possimus itaque, adipisci dolor. <br>
            </p>
        </section>
        <article id="lista">
            <ol type="i" start="1">Dodamy jeszcze tylko drobną listę uporządkowaną.
                <li>pierwszy element</li>
                <li class="prawo">drugi element</li>
                <li>trzeci element</li>
                <li class="lewo">czwarty element</li>
                <li>piąty element</li>
                <li class="prawo">szósty element</li>
                <li>siódmy element</li>
                <li class="lewo">ósmy element</li>
            </ol>
        </article>
        <aside>
            <h2>I jeszcze drobną tabelkę ale tylko body.</h2>
            <table>
                <tbody>
                    <tr>
                        <td class="jeden">kolumna 1</td>
                        <td>kolumna 2</td>
                        <td>kolumna 3</td>
                        <td>kolumna 4</td>
                    </tr>
                    <tr>
                        <td class="jeden">kolumna 1</td>
                        <td colspan="2">kolumna 2 i 3</td>
                        <td>kolumna 4</td>
                    </tr>
                    <tr>
                        <td class="jeden" colspan="4">kolumna 1 - 4</td>
                    </tr>
                </tbody>
            </table>
        </aside>
    </div>
</body>

</html>
-----------------------------------------------------------------------
Kod źródłowy do dodawania plików .js i .css oAaz stylozowanie inlino'we:

Source Code adding CSS and JavaScript
External File Source

<script src="script.js"></script>

<link rel="stylesheet" href="style.css" >

Onpage CSS and JavaScript

<script> alert('Page Hello'); </script>

<style> div{ background-color:yellow; } </style>

InLine Style and JavaScript

<header style="background-color:yellow;"> <h1 onclick="javascript:alert('Hello');">Welcome to my Website</h1> <p>tag line</p> </header>
----------------------------------------------------------------------------

3. Opcje styli tła - Background styling options:

Do tej części używamy pliku 3._cssbackstyle.html oraz głónym zainteresowanym jest
bacjstyle.css:

h1 {
    /* W ten sposób zmieniamy kolor tła , ale jest o wiele więcej możliwości nadania wyglądu tła.*/
    background-color: rgb(51, 51, 13);
    /* Możemy np zmienić  wysokość naszego h1, co spowoduje rozszerzenie tła, natomiast ze waględu na to, że nie zadeklarowaliśmy ułożenia tekstu vertykalnego, to sam tekst zostanie na górze.*/
    height: 100px;
}

.header {
    text-align: center;
    height: 200px;
    /* Można zastosować implementację zdjęcia jako tła w następujący sposób */
    /* background-image: url("http://lorempixel.com/g/400/200"); Przy odpowiednim argumencie wpisujemy adres url do obrazka, który chcemy tutaj wrzucić */
    /* Aby było widać czcionkę zmieniamy jej kolor*/ 
    color: rgb(0, 133, 66);
    /* Możemy również spozycjonować nasze zdjęcie ponieważ jest ono za małe i z automatu powtarzane jak widzimy na stronie.*/
    background-position: center; /* Zdjęcie które wrzucimy ma być na środku, jednak mmusimy wyłączyć powtarzanie zdjęcia*/
    background-repeat: no-repeat; /* Jest to oczywiście tylko jedna z opji, które możemy wybrać w tej kategorii, a jest tego wiele.*/
    /* Możemy również personaliazować wielkość podkładu/tła, dzięki poniższemy argumentowi. */
    /* background-size: 100px 50px; Na pierwszym miejscu jest szerokość 'width', a na drugim wysokość 'height'  */
    /* Możemy również rozciągać obrazek za pomocą procentówm, a minowicie podawać jaki obszar obrazek ma zajmować, nie jest to jednak najlepszą metodo, ponieważ obrazki o mniejszej skali są rozciągane, przez co tracą też na jakości. */
    /* background-size: 100% 100%; */
    /* Obrazki możemy rónież doapasowywać za pomocą innych wartości, np*/
    /* background-size: cover; Rozciąga obrazek  na całą szerokość strony/kontenerka nie zmieniając jednak rozmiarów elementów obrazka np: postaci, przedmiotów, itp, lecz doskalowuje ich wielkość */
    /* Mamy również możliwość automatycznego przypisywania wielkościobrazka poprzez użycie wartości 'auto'.  */
    /* background-size: auto; */
    /* Możemy również przypisać kilka wartości do jednego argumentu oddzielając je tylko spacją a dopiero po zakończeniu przypisywania wartości stawiamy średnik */
    background: url("http://lorempixel.com/g/400/200") no-repeat fixed center;
}

Więcej opcji zabawy ze stylami css dotyczącymi tła znajdziemy w dokumentacji języaka CSS argument background.

link do strony z właściwościami stylizacji tła języka css:

https://www.w3schools.com/cssref/css3_pr_background.asp
-------------------------------------------------------------------------

4. Selekktory CSS.
Plik powiązany to plik 4._selektory_css.html
Plik główmy styli to:
csssel.css:
/* Jednym z rodzajów selektorów w języku CSS jest po prostu element */
/* Aby trochę się tabelka wytóżniała, dodajmy chociaż granice */
table, td {
    border: 1px solid red;
}

/* Jednym z selektorów jest identyfikator zapisywany w html'u "id",
jest on unikatowy i jeden identyfikator o danej nazwie może być użyty na jednej stronie.
W języku css przywołuje się go za pomocą '#id'  i wtedy możemy nadawać sobie styl do danego jednego elementu.
Możemy mieć dwa te same elementy np h1, a dany styl chcemy nadać tylko jednemu z nich to nadajemy mu identyfikator, a następnie stylizujemy za pomocą danego identyfikatora dany element np.*/
#tytul {
    /* Tutaj możemy teraz nadać jakiś styl dla danego elementu i tylko dla niego poniważ identyfiktor jest unikatowy. */
    color: rgb(170, 170, 105);
    background-color: black;
}
/* To samo możemy zrobić z całym headerem choć jeśli nie ma potrzeby stosowania identyfikatora, to lepiej tego nie robić ale jeśli będziemy mieli 2 headery to już inna sprawa */
#mojnaglowek{
    text-align: center;
    background: url("http://lorempixel.com/400/200/sports/Dummy-Text") no-repeat  center;
    background-size: cover;
    height: 400px;
}
/* Dzięki temu możemy uzyskać ciekawy wygląc nagłówka ponieważ będzie rysunek jako tło i napis na pasku napisowym jeśli można t tak nazwać */
/* Kolejnym z selektorów jest klasa, która w przeciwieństwie do identyfikatora nie jest unikatowa i wiele elementów na jednej stronie może posiadać klasę o tej samej nazwie, więc jeśli chcemy kilku nawet różnym elementom nadać ten sam styl,
 to powinniśmy użyć klasy, którą wywołujemy w css'ie za pomocą '.class' */
.pierwszystyl {
    text-align: left;
    text-decoration: underline;
    column-count: auto;
    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
    font-size: 1.5em;
    color: brown;
 }
 --------------------------------------------------------------------------

 5. Pudełkowy model styli CSS - Box Model Boxes.
 Pudełkowy wygląd styli czyli jak wygląda  i z czego się składa pojedynczy element strony, a mianowicie:
 1. Treść właściwa - jest to część, którą zajmuje rzeczywisty element,
 2. Padding - jest to odstęp od obrzeży pudełka, charakteryzuje się tym, że element jest tak jakby wpychany do środka pudełka,
 3. Border - obręb.granica dookoła naszego elementu
 4. Margin - jest marginesem, który wskazuje odstęp od innych elementów naszej strony.
 Ogólnie i padding i margin zapisywać możemy podobnie, a mianowicie:
 margin/padding: 10px(lub inne jednostki wielkości):
    margin/padding: 10px 0 10px 0;
    margin/padding: 0 10px 0 10px;
    margin/padding: 10px 0;
    margin/padding: 0 10px;
    margin/padding: auto;
    margin/padding: 5px 20px 8px 7pxx;
Odczytujemy to w sposób następujący:
Pierwsza wartość to odległość od góry.
I zgodnie z ruchem wskazówek zegara druga wartość to odległość od lewej.
Trzecia to odległosć od dołu.
Czwarta to odległość z prawej.
Jeśli używamy tylko jednej wartości lub wartości auto , oznacza że  chcemy takiej samej odległości z każdej strony. 
Odległość o wartość albo auto, która znaczy, że daje odległość tę samą od każdej strony naszego pudełka:)
Jeśli podajemy tylko dwie wartości, oznacza to można powiedzieć parowanie, czyli jeśli pierwsza wartość jest jakaś, to oznacza, że dotyczy góry i dołu,
Jeśli jednak druga wartość jest podna to oznacza, że dotyczy prawej i lewej strony.
 
 Plik powiązany to plik 5._cssbmb.html
Plik główmy styli to:
bmb.css:
header {
    text-align: center;
}
/* Skoro mamy już kilka rzeczy na naszej stronie, to możemy powrzucać też kilka styli, więc zaczynamy! */
table, td, h1, h2, h3, h4, h5, h6  {
    /* Margines oddala nam  elementy od siebie */
    margin: 10px 0 10px 0;
    /* Padding oddala nam naszą zawartość od granicy czyli tak jakby wpycha naszą zawartość do środka. */
    padding: 5px;
    /* Teraz kilka operacji na temat granic dla danych elementów */
    border-width: 1px; /* Szerokość granicy */
    border-style: ridge; /* Styl jakości grnicy jest kilka głównie używanych, a ridget jest to taka ledwo widoczna granica, ale jest więcej możliwości od lini ciągłej po kropkowaną włącznie. */
    border-color: brown; /* Odpowiada za kolor granicy/obramowania */
    background-color: grey;
}
ol, li {
    /* Możemy zapiszć obramowania w jecnej linii z takim samym efektem */
    border: 2px dashed olive; /* Aby w ogóle działało obramowanie, to musimy podać kilka podstawowych wartości. Nizbedna jest szerokość ponieważś zdefiniowana na stałe jest grubość 0px więc nie będziemy jej widzieli. reszta parametrów to nasze widzimisię ponieważ zadeklarowana na stałe jest kolor i rodzaj ograniczenia więc jeśli tego nie podamy to i tak będziemy to widzieli.*/
   /* Możemy również podzielić margins i paddings na części a nie pisać tylko w jednej linijce. np: */
    margin-bottom: 25px;
    margin-top: 10px;
    margin-left: 5px;
    margin-right: 3px;
    /* To samo możemy zrobić z padding'iem */
    padding-top: 10px;
    padding-bottom: 22px;
    padding-left: 23px;
    padding-right: 10px;
}
/* Css oferuje również zaokrąglanie granic, za pomocą nastpującego argumentu. */
#oko {
    /* Aby wyszło nam kółko to musimy podać wielkość pudełka, najlepiej w kwadracie ponieważ z prostokąta wyjdzie elipsa., które chcemy zaokrąglić, a następnie użżyć border-radius: 50%; */
    height: 60px;
    width: 60px;
    text-align: center;
    /* vertical-align: middle; */ /* Przy określaniu pionowego położenia tekstu musimy również ustalić wielkość czyli wysokość i szerokość pudełka w którym chcemy umieścić tekst w środku. */
    border: 1px black solid;
    background-color: grey;
    /* Tak robimy koło;) */
    border-radius: 50%;
}
#oko2 {
    text-align: center;
    /* Tak nadajemy zaokrąglenia każdemu z rogów wedle takiej samej zasady jak przy prostych obramowaniach, zaczynając od lewego górnego rogu*/
    border: 3px black dashed;
    border-radius: 3em 20% 50px 25%; /* Jak też widaĆ możemy również mieszać jednostki, co jednak nie jest zalecane podczas komercyjnego tworzenia kodu. */
    /* Jak w powyższym przykładzie powinniśmy również użyć kwadratu najlepiej lub prostokąta o niedużej różnicy ramionach, ponieważ przy całej długości strony nie widać dobrze efektu zaokrąglenia. */
    height: 100px;
    width: 100px;
    background-color: greenyellow;
}
/* !!! UWAGA Należy pamiętać, że jak do zwykłych granic, tak i do zaokrąglonych, możemy używać różnego rodzaniu wielkości nie tylko % i px, ale dość popularne są też em - wielkości odpowiadające wartości wielkości czczionki, która w standardzie ma ok 16px więc 1 em == 16px (jeśli sami nie zdefiniujemy wielkości czzcionki. */
--------------------------------------------------------------------------
Link do strony, tłumaczącej użycia wartości parametrów granic w języku CSS:

https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties
--------------------------------------------------------------------------

6. Display w języku CSS.
display.css:

header {
    text-align: center;
}
span {
    /* Ciekawym zastosowaniem display'a jest możliwość "zamiany" naszych span'ów na divy - czyli pudełka za pomocą wartości block */
    display: block;
    background-color: yellowgreen;
}
/* W drugą jednak stronę możemy zrobić myk, który zamienia div'y na span'y */
#oko2 { /* Który jest naszym div-em */
    display: inline-block; /* Które zamienia nam div-a na kontenerek o długości tekstu */
    background-color: blue;
} 
#oko1 {
    display: inline; /* Ta wartość argumentu tworzy span'a z div'a, jednak w przeciwieństwie do 'inline-block' zabrania również używania styli z pliku css lecz tylko z wysokości tagu tym rodzajem displaya objętego. */
}
/* Powyższą wartość argumentu dobrze jest użyć do paska nawigacyjnego, któremu nadaliśmy identyfikator "navpas".  */
#navpas ul li a { /* Prześliśmy całą drogę do hiperlinków aby zinlineo'wać nasze giperlinki. */
    /* Do sprawdzenia, czy dobrze poprowaedziliśmy ścieżkę zmieńmy kolor tła iperlinków */
    display: inline-block; /* Tworzy blok wokół elementów listy, któremu możemy nadać stałe parametry jak np. poniższa szerokość "width." */
    background-color: rgb(206, 188, 188); /* Do sprawdzenia i jakiegoś wyróżnienia elementu, którego to dotyczy. */
    width: 300px; /* Szerokość ogólna bloku. z zaznaczonymi elementami. */
}
.reszta p {
    /* Jest jeszcze kilka opcji displaya, które możemy wykorzystać, np: */
    display: list-item; /* Wyświetla zawartość lub pojedyncze elementy w postaci listy nieuporządkowanej. */
    background-color: yellow;
    margin: 25px 25px 25px 25px;
}
.drugistyl h4 {
    display: none; /* Rzeczy nie są widoczne i nie zabierają mniejsca na stronie.*/
    /* visibility: hidden; Rzeczy podobnie jak do visibility none nie są widoczne dla użytkownika, ale zabierają miejsce na stronie. */
    /* display: inline-table; Wyświetla wszystko w jednej linii niby w postaci tabeli przynajmniej osobne teksty. */
}
--------------------------------------------------------------------------

7. Kilka dodatkowych infomacji o pozycjonowaniu elementów na stronie.
pozycje.css:
header {
    text-align: center;
    background: green url("http://lorempixel.com/400/200") no-repeat center;
    background-size: cover;
    height: 400px;
}
/* Zajmiemy się tutaj pozycjonowaniem naszego elementu Kontakt na stronie */
#kontakt span {
    /* Najpierw kilka styli samego napisu, aby łatwiej było go zidentyfikować. */
    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
    font-weight: bold;
    font-size: 1.5em;
    color: chocolate;
    border: 1px double black;
    height: 40px;
    width: 200px;
    padding: 5px;
    text-align: center;
    border-radius: 25px;
    background-color: rgb(189, 220, 247);
}
#kontakt { /* Podzieliliśmy tylko dlatego, aby style css nadać tylko elementowi objętemu kontenerkiem span. */
    /* Teraz trochę na temat pozycjonowania: */
    /* Z powodu tego, że zdeklarowana pozycja z automatu jest static-statyczna, czynie nie przesuwalna, nie będzie sensem jej deklarownie takie samo po prostu nic to nie zmieni. */
    /* position: static; Nic to nie zmieni dla strony. */
    /* position: relative; Ten argument sam w sobie również nie zminia nic  pozycji elementu, natomiast otwiera nam możliwość nadawania/zmiany pozycji interesującego nas elementu. */
    /* Możemy teraz deklarować odległości od w następujący sposób: */
    /* position: absolute; Pozycja absolutna ustawia nam element w stosunku do całej strony, a nie w stosunku do miejscam w którym element się znajdował. */
    position: fixed; /* Ta pozycja utrzymuje element w stałym miejscu i tak jak pozycja absolutna w stosunku do całej strony. */
    top: 82px;
    /* right: 60px; */
    bottom: 25px;
    left: 25px; 
    /* Jak widzimy możemy od naszeje pozycji początkowej przesuwać element w jakimkolwiek kierunku.
    Oczywiście left i right są od siebie zależne i niepotrzebne dwa do jednego elementu ponieważ strona w tych kierunkach jest ograniczona wielkością ekranu w związku z czym element przesunięty do granicy strony będzie wychodził poza nią i będzie niewidoczny.  */
    /* Użyliśmy tutaj 4rech kierunków aby udowodnić, że można przesuwać w różnych kierunkach. */
    /* !! UWAGA jeśli position: static, to mimo zadeklarowanych odległości pozycja elementu nigdy by się nie zmieniła. */

}
h1 {
    background-color: green;
}

Jest dużo więcej opcji pocjonowania, ale te są jedne z najważniejszych i najczęściej używanych.
---------------------------------------------------------------------------

8. Pseudo-Klasy, pseudo elementy.
Pseudo klasy - służą do definiowana specjalnych stanów elementów, zapisujemy je za pomocą jednego ":".
Peudo elementy - jest to element nadający style do części elementu, zapisujemy je za pomocą dwóch "::".
pseudo.css:

header {
    text-align: center;
    background: green url("http://lorempixel.com/400/200/sports/Dummy-Text") no-repeat center;
    background-size: cover;
    height: 400px;
}
/* Zajmiemy się tutaj pozycjonowaniem naszego elementu Kontakt na stronie */
#kontakt span {
    /* Najpierw kilka styli samego napisu, aby łatwiej było go zidentyfikować. */
    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
    font-weight: bold;
    font-size: 1.5em;
    color: chocolate;
    border: 1px double black;
    height: 40px;
    width: 200px;
    padding: 5px;
    text-align: center;
    border-radius: 25px;
    background-color: rgb(189, 220, 247);
}
#kontakt { /* Podzieliliśmy tylko dlatego, aby style css nadać tylko elementowi objętemu kontenerkiem span. */
    /* Teraz trochę na temat pozycjonowania: */
    /* Z powodu tego, że zdeklarowana pozycja z automatu jest static-statyczna, czynie nie przesuwalna, nie będzie sensem jej deklarownie takie samo po prostu nic to nie zmieni. */
    position: static; /*Nic to nie zmieni dla strony, jednak dla naszych potrzeb wystarczy pozycja elementy na swoim miejscu..*/
    /* position: relative; Ten argument sam w sobie również nie zminia nic  pozycji elementu, natomiast otwiera nam możliwość nadawania/zmiany pozycji interesującego nas elementu. */
    /* Możemy teraz deklarować odległości od w następujący sposób: */
    /* position: absolute; Pozycja absolutna ustawia nam element w stosunku do całej strony, a nie w stosunku do miejscam w którym element się znajdował. */
    /* position: fixed; /* Ta pozycja utrzymuje element w stałym miejscu i tak jak pozycja absolutna w stosunku do całej strony. */
    /* top: 82px; */
    /* right: 60px; */
    /* bottom: 25px; */
    /* left: 25px;  */ 
    /* Jak widzimy możemy od naszeje pozycji początkowej przesuwać element w jakimkolwiek kierunku.
    Oczywiście left i right są od siebie zależne i niepotrzebne dwa do jednego elementu ponieważ strona w tych kierunkach jest ograniczona wielkością ekranu w związku z czym element przesunięty do granicy strony będzie wychodził poza nią i będzie niewidoczny.  */
    /* Użyliśmy tutaj 4rech kierunków aby udowodnić, że można przesuwać w różnych kierunkach. */
    /* !! UWAGA jeśli position: static, to mimo zadeklarowanych odległości pozycja elementu nigdy by się nie zmieniła. */

}
table td{
    border: 2px dashed orange;
}
h1 {
    background-color: green;
}
/* Dodajmy kilka styli do naszego paska nawigacyjnego, którym będziemy chcieli się teraz zająć */
#navpas a {
    display: inline-block;
    background: grey;
    width: 300px;
    position: relative;
}
/* Jedną z fajnych funkcji jest zmiana wyświetlania elementu podczac przejeżdżania po nich myszką/kursorem. */
/* Pseudoklasy zapisujemy wstawiając dwukropek po nazwie elementu, np. */
p:hover { /* Jak widać ta pseudoklasa nadaje styl elementowi w momencie najechania na niego myszką */
    background-color: blueviolet;
}
/* Teraz zajmijmy się stylowniem dynamicznym naszego paska nawigacyjnego: */
#navpas a:hover {
    background-color: darkblue;
    color: white;
}
.pierwszystyl:first-Child { /*Nadaje styl tylko pierwszemu elementowi danego zbioru. */
    display: block;
    background-color: green;
}
/* Obecny styl nadaje drugim(2) elementom  danego zbioru. */
.trzecistyl td:nth-child(2) {
    background-color: blueviolet;
    color: white;
    /* Oczywiście w nawiasie możemy np wpisać "even", czyli wszystkie parzyste elementy będą przsybierały dany styl, luc odd czyli wszystkie nieparzyste elementy daanego zbioru nabierają dany styl.*/
}
/* Czas na pseudo-elementy */
/* Pseudo element do h4 */
h4::after { /* Po danym elemencie pokazują się dane style. */
    content: " h4's are here";
    color: aqua;
    background-color: beige;
}
/* Zanim jednak nadamy dymki pod interesujące nas elementy, nadajmy kolor czcionc przy kontakcie, aby się wyróżniała. */
small {
    color: crimson;
    font-weight: bold;
}
/* Tutaj określamy sobie co ma się dziać przed i po najechaniu na nasze 3 elementy na stronie.strony */
span[data-descr] {
    position: relative;
    text-decoration: underline;
    color: #00F;
    cursor: help;
  }
  
  span[data-descr]:hover::after {
    content: attr(data-descr);
    position: absolute;
    left: 0;
    top: 24px;
    min-width: 150px;
    border: 1px #aaaaaa double;
    border-radius: 10px;
    background-color: #ffffcc;
    padding: 12px;
    color: #000000;
    font-size: 14px;
    z-index: 1;
  }
  ----------------------------------------------------------------------
  
  9. Trochę teorii na temat zastosowania selektorów.
  Możemy nadać kilku elementom style w jednym zapisie, np:
  h1(element), .h2(klasa), #h3(identyfikator) - jeśli selektory są oddzielone przecinkiem, oznacza to, że każy z nich ma przybrać nadant styl.
Jest również możliwe nadawanie kiklu elementom pseudo-klas i pseudo-elementów oczywiście stosując przekinek
Nadanie kilku elementom tej samej pseudoklasy i pseudoelementu odbywa się w następujący sposób.
h1:pseudo-klasa::pseudo-element, .h2:pseudo-klasa::pseudo-element, itd.
  
  Jeśli jednak elementy nie są oddzialone przecinkiem, to oznacza, ze wpisujemy ścieżkę po kroczku do elementu nas interesującego, zby nadać mu styl i nazywa się to nestowaniem czyli zagnieżdżaniem, np:
  #navpas ul li a {...} - jest to droga do elementu kotwiczącego "a", który znajduje się w elemencie o klasie "navpas" , w której zagnieżdżona jest lista w której znajdują się kotwice do linków przenoszących nas na jakąś stronę.
  Jeśli chcemy nadać pseudo klasę czy też pseudo element dla tak zagnieżdżonego elementu, nadajemy to ostatecznemu elementowi w następujący sposób:
  #navpas ul li a:pseudoklasa::pseudoelement - ponieważ można również dodać pseudo-element do pseudo-klasy. 

--------------------------------------------------------------------------
Link do strony, opisującej pseudo-klas języka CSS:

Pseudo Classes
https://developer.mozilla.org/en/docs/Web/CSS/Pseudo-classes

pseudo Elements
https://developer.mozilla.org/en/docs/Web/CSS/Pseudo-elements

CSS tooltip on codepen
https://codepen.io/discoveryvip/pen/qZJvdb
--------------------------------------------------------------------------

10.Ulepszenie strony.
Poprawiony wygląd ogólny strony, kilka standardów, ale jeszcze kilka starych styli pokazujących różne zastosowania argumentów, parametrów i wartości języka CSS.
Została jeszcze zamiana listy nieuporządkowanej w pasesk nawigacyjny.
I utworzenie 2 kolumn na głównej stronie.
Kwestia dostosowania strony do wielkości ekranu.
Implantacja google fonts.
Aby zaimplementować do strony jakąś ciekawą czcionkę znajdującą się na stronie googlowej  musimy najpierw zlinkować ją do kodu html.
Aby to zrobić należy:
1. Wejść na stronę: https://fonts.google.com/
2. Wybrać interesującą nas czcionkę i nacisnąć krzyżyk.
3. Otworzyć pojawiające się na dole strony okno i skopiować link, który następnie wklejamy do nagłówka naszej strony .html
4. Skopiować argument font-family: ...
5. Wrzucić argument do w interesujący nas element kodu css.

Źródła:
a) 9._upgrade.html:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="cssstyle/upgrade.css">
    <!-- Tutaj wrzucamy link do interesującej nas czcionki ze strony internetowej. -->
    <link href="https://fonts.googleapis.com/css?family=Philosopher&display=swap" rel="stylesheet">
    <title>Updated</title>
</head>

<body>
    <div id="glkont">
        <header id="mojnaglowek">
            <h1 id="tytul">Poprawki</h1>
        </header>
        <nav id="navpas">
            <ul>
                <li>
                    <a href="linkowe/bmb.html">Domowa</a>
                </li>
                <li>
                    <a href="linkowe/bmb.html">Link1</a>
                </li>
                <li>
                    <a href="linkowe/bmb.html">Link2</a>
                </li>
                <li>
                    <a href="">Nowy Link</a>
                </li>
            </ul>
        </nav>
        <div id="kontakt"><span data-descr="Jakub Kruszyński (+48)601144905" )> Kontakt</span> -
            <small> Najedź
                tutaj.</small>
        </div>
        <!-- Całą naszą zawartość  zamknijmy w kontenerze głównym 'section'. -->
        <section id="kontener">
            <!-- Blok aside może się znajdować poza kontenerkiem, którym jest article -->
            <aside id="podmenu">
                <h1> Side Menu</h1>
            </aside>
            <article class="zawartosc">
                <div>

                    <div class="reszta">
                        <p>Kilka Poprawek stylowych do strony.</p>
                    </div>
                    <div class="reszta">
                        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Odit quia odio dicta suscipit
                            tempora
                            consectetur dolorum ipsam impedit non, aliquam, ut expedita quos reiciendis quod quidem iste
                            unde
                            distinctio! Voluptatem?</p>
                    </div>
                    <div class="reszta">
                        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ut perferendis nulla suscipit
                            libero
                            assumenda
                            expedita nihil, nisi nobis eum ad quisquam consequuntur mollitia placeat at ab repudiandae
                            unde?
                            Vitae,
                            neque.</p>
                    </div>
                    <div class="reszta">
                        <p><span> A tutaj mamy kilka innych rzeczy </span></p>
                        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique, ipsum. Consequatur
                            inventore
                            consectetur nisi blanditiis minima excepturi mollitia id esse! Nobis, magni similique
                            accusamus
                            temporibus beatae a commodi sapiente ipsam.</p>
                    </div>
                    <div>
                        <img src="http://lorempixel.com/400/200" class="mojobraz"
                            alt="lorem pixel się wczytuje pół dnia jak zwykle a i tak nici z tego">
                    </div>
                </div>
                <!-- 'aside' Może również znajdować się w środku kontenerka, którym jest u nas article -->
                <aside>
                    <h3 class="clear">Kilka rzeczy o tabelce.</h3>
                    <div>
                        <table>
                            <tbody>
                                <tr class="trzecistyl">
                                    <td>kol 1 wiersz 1</td>
                                    <td>kol 2 wiersz 1</td>
                                    <td>kol 3 wiersz 1</td>
                                    <td>kol 4 wiersz 1</td>
                                    <td>kol 5 wiersz 1</td>
                                    <td>kol 6 wiersz 1</td>
                                </tr>
                                <tr class="trzecistyl">
                                    <td>kol 1 wiersz 2</td>
                                    <td colspan="2">kol 2,3 wiersz 2</td>
                                    <td>kol 4 wiersz 2</td>
                                    <td>kol 5 wiersz 2</td>
                                    <td>kol 6 wiersz 2</td>
                                </tr>
                                <tr class="trzecistyl">
                                    <td colspan="3">kol 1,2,3 wiersz 3</td>
                                    <td colspan="3">kol 4,5,6 wiersz 3</td>
                                </tr>
                                <tr class="trzecistyl">
                                    <td>kol 1 wiersz 4</td>
                                    <td>kol 2 wiersz 4</td>
                                    <td colspan="3">kol 3, 4, 5 wiersz 4</td>
                                    <td>kol 6 wiersz 4</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <br>
                    <div>
                        <ol type="I" id="lista">
                            <li class="pierwszystyl">jeden</li>
                            <li class="pierwszystyl">dwa</li>
                            <li class="pierwszystyl">trzy</li>
                            <li class="pierwszystyl">cztery</li>
                            <li class="pierwszystyl">pięć</li>
                            <li class="pierwszystyl">sześć</li>
                        </ol>
                    </div>
                    <h3>Jeszcze trochę rzeczy.</h3>
                    <div class="drugistyl">
                        <p>pierwsza rzecz</p>
                        <p>druga rzecz</p>
                        <h5>Tutaj dodamy kilka dymków dotyczących
                            <!-- Tutaj są specjalnie zdefiniowane spany, pod które w stylach przyczepimy dymki. -->
                            <span
                                data-descr="Paragrafy powyżej jak widzimy nie posiadają żadnej stylizacji po prostu tekst.">paragrafów</span>
                            oraz
                            <span
                                data-descr="Headery poniżej w zależności od numeru mają przypisaną wielkość oraz wagę.">headerów
                                czwartych!</span>.
                        </h5>
                        <h4>trzecia rzecz</h4>
                        <h4>czwarta rzecz</h4>
                        <h4>piąta rzecz</h4>
                        <h4>szósta rzecz</h4>
                        <h4>siódma rzecz</h4>
                        <h4>ósma rzecz</h4>
                    </div>
                </aside>
            </article>
        </section>
        <footer id="mojastopka" class="clear">
            Prawa autorskie strony
        </footer>
    </div>
</body>

</html>

### CSS ###
upgrade.css:

/* Zajmijmy się całym ciałem strony */
body{
    font-size: 16px; /* Odpowiada za wielkość czcionki */
    line-height: 18px;  /* Odpowiadz za wysokość linii przeważnie lepiej jest wziąć trochę większą czcionkę. */
    color: #111;
    font-family: Arial, Helvetica, sans-serif;
    margin: 0;
    padding: 0;
}

/* HEADER */
header {
    font-family: 'Philosopher', sans-serif;
    text-align: center;
    background: green url("http://lorempixel.com/400/200/sports/Dummy-Text") no-repeat center;
    background-size: cover;
    height: 400px;
}

/* TYTUŁ */
/* Nadajmy kilka standardowych styli do kilku elementów */
#tytul {
    font-size: 30px;
    font-weight: 900;
    line-height: 40px;
    background-color: black;
    color: crimson;
}

/* KONTAKT */
#kontakt span {
    
    font-family: 'Philosopher', sans-serif;
    font-weight: bold;
    font-size: 1.5em;
    color: chocolate;
    border: 1px double black;
    height: 40px;
    width: 200px;
    padding: 5px;
    text-align: center;
    border-radius: 25px;
    background-color: rgb(189, 220, 247);
}

#kontakt { 
    font-family: 'Philosopher', sans-serif;
    position: absolute; 
    top: 92px;
    left: 25px;
}

small {
    font-family: 'Philosopher', sans-serif;
    color: crimson;
    font-weight: bold;
}


/* PASEK NAWIGACYJNY */
#navpas {
    background-color:#333344;
    color: #efefef;
    height: 60px;
    margin: 0;
}

#navpas a:hover {
    background-color: rgb(115, 185, 10);
    color: white;
}

/* Jak tworzymy nasz pasek nawigacyjny w czystym css'ie i HTML'u */
#navpas ul {
    list-style: none; /*Najpierw wyłączamy kropki z naszej nieuporządkowanej listy*/
    margin: 0;
    padding: 0;
}
#navpas ul li a {
    vertical-align: middle;
    text-align: center;
    display: inline-block;
    background: rgb(218, 214, 214);
    color: #000;
    position: relative;
    text-decoration: none;
    height: 35px;
    width: 95%;
    margin: 0 1%; 
}

#navpas ul li {
    float: left; /* Float pozwala nam jak chcemy mieć otaczający nas text umieścić. */
    width: 25%;
    /* margin: auto; */
}


/* SUBMENU */
#podmenu {
    font-family: 'Philosopher', sans-serif;
    float: left;
    width: 28%;
    padding: 1%;
    height: 400px;
}

#podmenu h1 {
    text-align: center;
} 

/* WSZYSTKO W JEDNYM KONTENERZE */
#glkon {
    max-width: 1140px; /*Skoro jest to kontener otaczający wszystko, to w taki sposób można naprawić błąd wynikający z różnej wielkości monitorów*/
}

/* CAŁOŚĆ ZAWARTOŚCI */
#kontener{
    background-color: #a5a5ac;
    height: 1220px;
}
/* GŁÓNWNA ZAWARTOŚĆ */
.zawartosc {
    /* clear: both; Utrzymuje odstęp po obu stronach danego elementu */
    background-color: #ddd;
    float: left;
    width: 68%;
    padding: 1%;
}

/* EDYCJA OBRAZKA - ponieważ można. */
.mojobraz {
    background-size: cover;
    float: left;
    margin: 10px;
}

/* Tabelka */
table {
    width: 100%;
}

table td{
    border: 2px dashed darkgray;
}

th, td {
    padding: 10px;
    min-width: 60px;
}

/* LISTA */
#lista{
    clear: both;
}


/* Te style obecnie trochę przeszkadzają, ale zostawiam do wglądu. */
/*
.reszta p {
    border: 1px dashed red;
    background-color: grey;
    color: antiquewhite;
    min-height: 50px;
    margin: 30px 0 0 0;
}
.reszta p:hover {
    background-color: rgb(4, 4, 83);
    color: chartreuse;
}
*/


.drugistyl p, h5 {
    display: block;
    background-color: gray;
    color: darkred;
}

.drugistyl p:hover::before, .drugistyl p:hover {
    content: "To jest nasza ";
    color: aliceblue;
}

.trzecistyl td:nth-child(2) {
    background-color: blueviolet;
    color: white;
}

h4:hover::after { 
    border: 2px dotted orange;
    content: " to jest h4";
    color: rgb(2, 48, 48);
    background-color: yellowgreen;
}


/* STÓPKA */
.clear  {
    clear: both;
}

#mojastopka {
    background-color: #333344;
    color: #ddd;
    height: 50px;
    vertical-align: middle;
    text-align: center;

}

  /* Dymki spod kilku elementów */
span[data-descr] {
    position: relative;
    text-decoration: underline;
    color: #00F;
    cursor: help;
}

span[data-descr]:hover::after {
    content: attr(data-descr);
    position: absolute;
    left: 0;
    top: 24px;
    min-width: 150px;
    border: 1px #aaaaaa double;
    border-radius: 10px;
    background-color: #ffffcc;
    padding: 12px;
    color: #000000;
    font-size: 14px;
    z-index: 1;
}
/* POPRAWKA DOSTOSOWANIA DO WIELKOŚCI EKRANU */
/* Poniższy kawałek kodu robimy, aby w miarę rozszerzania strony na ekranie, dostosowała się ona do wielkości ekranu aby wyświetlała się bardziej czytelnie. */
/* Kolejny element eliminujący błędy zależące od wielkości ekranu. */
@media screen and (max-width:600px) { /* Jest to animacja dotycząca maksymalnego rozszerzenia strony na ekranie, a mianowicie ogranicza to. */
    #glkont { /* Oznacza to, że jeśli dojedziemy do granicznej szerokości to tło naszej strony, a mianowicie kontenera się zmienui na zadane. */
        background-color: yellowgreen;
    }
/* DODATKI  */
/* Możemy zrobić dodatkowy selektor do menu, w którym umieścimy tylko rzeczy opisujące wielkości elementów menu. */
#navpas ul li a {
    width: 92%;
    margin: 1%;
    padding: 4px;
}

#navpas ul li {
    width: 25%;
}
/* Taki sam drugi selektor możemy zrobić do podmenu aby je lepiej obrobić. */

#podmenu {
    float: none;
    width: 100%;
    padding: 0;
    height: auto;
}
/* Rzędy i kolumny tabelki */
th, td {
    font-family: 'Philosopher', sans-serif;
    padding: 0;
    min-width: auto;
}
/* Obrazek */
.mojobraz {
    float: none;
    margin: 0;
    width: 100%;
}

/* I dodatek do zawartości */
.zawartosc {
    /* clear: both; Utrzymuje odstęp po obu stronach danego elementu */
    background-color: #ddd;
    float: none;
    width: 100%;
    padding: 1%;
    background-color: #ddd;
}
}


--------------------------------------------------------------------------
Linki do opisów niektórych właściwości kodu CSS.

https://developer.mozilla.org/en-US/docs/Web/CSS/Reference

https://en.wikipedia.org/wiki/Cascading_Style_Sheets
--------------------------------------------------------------------------

